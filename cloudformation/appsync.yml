Description: Aspan picture repository back-end

Parameters:
  Timestamp:
    Description: Timestamp
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[0-9]*"
  DeploymentBucketName:
    Description: Deployment bucket name
    Type: String
    MinLength: 1
    MaxLength: 100
  AllowedExtensions:
    Description: AllowedExtensions
    Type: String
    MinLength: 1
    MaxLength: 100

Resources:
  MetaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

  Api:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}-appsync
      AuthenticationType: API_KEY
  ApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt Api.ApiId
  AppsyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DefinitionS3Location: !Sub s3://${DeploymentBucketName}/cloudformation/schema.graphql
  MetaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name:
        !Join [
          "_",
          [!Join ["_", !Split ["-", !Sub "${AWS::StackName}"]], "meta_datasource"],
        ]
      Description: "The Notes Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref MetaTable
        AwsRegion: !Sub ${AWS::Region}
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBPolicy
  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !Join ["", [!GetAtt MetaTable.Arn, "*"]]
  FileSystemLambdaAppsyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name:
        !Join [
          "_",
          [!Join ["_", !Split ["-", !Sub "${AWS::StackName}"]], "file_system_datasource"],
        ]
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt FileSystemLambdaAppsyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt FileSystemLambda.Arn
  FileSystemLambdaAppsyncDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref FileSystemLambdaAppsyncDataSourceRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
  FileSystemLambdaAppsyncDataSourceRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:invokeFunction
            Resource:
              - !GetAtt FileSystemLambda.Arn
              - !Join [":", [!GetAtt FileSystemLambda.Arn, "*"]]
  ListFolderQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt Api.ApiId
      TypeName: Query
      FieldName: listFolder
      DataSourceName: !GetAtt FileSystemLambdaAppsyncDataSource.Name
  AttributesEntryQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt Api.ApiId
      TypeName: Entry
      FieldName: attributes
      DataSourceName: !GetAtt MetaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.source.id),
          },
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result.attributes)
  TagsEntryQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt Api.ApiId
      TypeName: Entry
      FieldName: tags
      DataSourceName: !GetAtt MetaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.source.id),
          },
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result.tags)

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-media
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  S3BucketRule:
    DependsOn: S3Bucket
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to invoke ExifLambda when new media file is uploaded
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref S3Bucket
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ExifLambda.Arn
          Id: ExifLambdaTarget
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ExifLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt S3BucketRule.Arn

  ExifLambda:
    DependsOn: LambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: build/lambda/exif/exif.handler
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: !Sub ${AWS::StackName}-${Timestamp}.zip
      Environment:
        Variables:
          TABLE_NAME: !Ref MetaTable
          ALLOWED_EXTENSIONS: !Sub ${AllowedExtensions}
  FileSystemLambda:
    DependsOn: LambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: build/lambda/fs/fs.handler
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: !Sub ${AWS::StackName}-${Timestamp}.zip
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref S3Bucket
          ALLOWED_EXTENSIONS: !Sub ${AllowedExtensions}
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Join
                    - "/"
                    - - !GetAtt S3Bucket.Arn
                      - "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt MetaTable.Arn

Outputs:
  ApiId:
    Value: !GetAtt Api.ApiId
  Arn:
    Value: !GetAtt Api.Arn
  GraphQLUrl:
    Value: !GetAtt Api.GraphQLUrl
