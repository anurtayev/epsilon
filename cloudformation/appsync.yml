Description: Aspan picture repository back-end

Parameters:
  Timestamp:
    Description: Timestamp
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[0-9]*"
  DeploymentBucketName:
    Description: Deployment bucket name
    Type: String
    MinLength: 1
    MaxLength: 100

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-dynamodb-role
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBPolicy
  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !Join ["", [!GetAtt DynamoDBTable.Arn, "*"]]
  Api:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}-appsync
      AuthenticationType: API_KEY
  ApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt Api.ApiId
  Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DefinitionS3Location: !Sub s3://${DeploymentBucketName}/cloudformation/schema.graphql
  AppSyncNotesTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name: !Join ["_", [!Join ["_", !Split ["-",!Sub "${AWS::StackName}"]], "datasource"]]
      Description: "The Notes Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref DynamoDBTable
        AwsRegion: !Sub ${AWS::Region}
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-media
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  S3BucketRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to invoke ExifLambda when new media file is uploaded
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref S3Bucket
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ExifLambda.Arn
          Id: ExifLambdaTarget
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ExifLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt S3BucketRule.Arn
  ExifLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt ExifLambdaExecutionRole.Arn
      Handler: build/lambda/exif/exif.handler
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: !Sub ${AWS::StackName}-${Timestamp}.zip
      Description: Invoke a function during stack creation.
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
  ExifLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Join 
                  - "/"
                  - 
                    - !GetAtt S3Bucket.Arn
                    - "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt DynamoDBTable.Arn

Outputs:
  ApiId:
    Value: !GetAtt Api.ApiId
  Arn:
    Value: !GetAtt Api.Arn
  GraphQLUrl:
    Value: !GetAtt Api.GraphQLUrl
