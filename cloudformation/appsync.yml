Description: Aspan picture repository back-end

Parameters:
  Timestamp:
    Description: Timestamp
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[0-9]*"
  DeploymentBucketName:
    Description: Deployment bucket name
    Type: String
    MinLength: 1
    MaxLength: 100
  AllowedExtensions:
    Description: AllowedExtensions
    Type: String
    MinLength: 1
    MaxLength: 100

Resources:
  MetaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-meta
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  TagsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-tags
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tag
          AttributeType: S
      KeySchema:
        - AttributeName: tag
          KeyType: HASH

  TagsFilesRelationshipsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-tags-files-relationships
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tag
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: tag
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE

  AttributesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-attributes
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: attribute
          AttributeType: S
      KeySchema:
        - AttributeName: attribute
          KeyType: HASH

  AttributesFilesRelationshipsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-attributes-files-relationships
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: attribute
          AttributeType: S
        - AttributeName: id
          AttributeType: S
        - AttributeName: attributeValue
          AttributeType: S
      KeySchema:
        - AttributeName: attributeValue
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: !Sub ${AWS::StackName}-attributes-files-relationships-index
          KeySchema:
            - AttributeName: attribute
              KeyType: HASH
            - AttributeName: id
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY

  AppsyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}-appsync
      AuthenticationType: API_KEY
  ApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
  AppsyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      DefinitionS3Location: !Sub s3://${DeploymentBucketName}/cloudformation/schema_${Timestamp}.graphql
  MetaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name:
        !Join [
          "_",
          [
            !Join ["_", !Split ["-", !Sub "${AWS::StackName}"]],
            "meta_datasource",
          ],
        ]
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref MetaTable
        AwsRegion: !Sub ${AWS::Region}
  AttributesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name:
        !Join [
          "_",
          [
            !Join ["_", !Split ["-", !Sub "${AWS::StackName}"]],
            "attributes_datasource",
          ],
        ]
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref AttributesTable
        AwsRegion: !Sub ${AWS::Region}
  TagsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name:
        !Join [
          "_",
          [
            !Join ["_", !Split ["-", !Sub "${AWS::StackName}"]],
            "tags_datasource",
          ],
        ]
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref TagsTable
        AwsRegion: !Sub ${AWS::Region}
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource:
              - !Join ["", [!GetAtt MetaTable.Arn, "*"]]
              - !Join ["", [!GetAtt AttributesTable.Arn, "*"]]
              - !Join ["", [!GetAtt TagsTable.Arn, "*"]]
  SearchLambdaAppsyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name: !Join ["_", [!Join ["_", !Split ["-", !Ref SearchLambda]], "ds"]]
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt LambdaAppsyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt SearchLambda.Arn
  ListFolderLambdaAppsyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name:
        !Join ["_", [!Join ["_", !Split ["-", !Ref ListFolderLambda]], "ds"]]
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt LambdaAppsyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ListFolderLambda.Arn
  LambdaAppsyncDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ListFolderLambdaAppsyncDataSourceRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
  ListFolderLambdaAppsyncDataSourceRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:invokeFunction
            Resource:
              - !GetAtt ListFolderLambda.Arn
              - !GetAtt SearchLambda.Arn
  ListFolderQueryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Query
      FieldName: listFolder
      DataSourceName: !GetAtt ListFolderLambdaAppsyncDataSource.Name
  SearchQueryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Query
      FieldName: search
      DataSourceName: !GetAtt SearchLambdaAppsyncDataSource.Name
  GetMetaQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Query
      FieldName: getMeta
      DataSourceName: !GetAtt MetaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)
  GetAttributesQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Query
      FieldName: getAttributes
      DataSourceName: !GetAtt AttributesDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "operation" : "Scan",
          "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        #set($attributesArray = [])

        #foreach ($attributeItem in $ctx.result.items)
          $util.qr($attributesArray.add($attributeItem.attribute))
        #end

        {
          "attributes": $util.toJson($attributesArray),
          "nextToken": $util.toJson($ctx.result.nextToken)
        }
  GetTagsQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Query
      FieldName: getTags
      DataSourceName: !GetAtt TagsDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "operation" : "Scan",
          "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        #set($tagsArray = [])

        #foreach ($tagItem in $ctx.result.items)
          $util.qr($tagsArray.add($tagItem.tag))
        #end

        {
          "tags": $util.toJson($tagsArray),
          "nextToken": $util.toJson($ctx.result.nextToken)
        }
  UpdateMetaDataMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Mutation
      FieldName: updateMetaData
      DataSourceName: !GetAtt MetaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
        #if ($util.isNull($ctx.args.metaDataInput) || $util.isNull($ctx.args.metaDataInput.attributes) && $util.isNull($ctx.args.metaDataInput.tags))
          "operation": "DeleteItem"
        #elseif (!$util.isNull($ctx.args.metaDataInput.attributes) && !$util.isNull($ctx.args.metaDataInput.tags))
          "operation": "UpdateItem",
          "update": {
            "expression": "SET attributes = :attributes, tags = :tags",
            "expressionValues": {
              ":attributes": $util.dynamodb.toDynamoDBJson($ctx.args.metaDataInput.attributes),
              ":tags": $util.dynamodb.toDynamoDBJson($ctx.args.metaDataInput.tags)
            }
          }
        #elseif (!$util.isNull($ctx.args.metaDataInput.attributes) && $util.isNull($ctx.args.metaDataInput.tags))
          "operation": "UpdateItem",
          "update": {
            "expression": "SET attributes = :attributes REMOVE tags",
            "expressionValues": {
              ":attributes": $util.dynamodb.toDynamoDBJson($ctx.args.metaDataInput.attributes)
            }
          }
        #elseif (!$util.isNull($ctx.args.metaDataInput.tags) && $util.isNull($ctx.args.metaDataInput.attributes))
          "operation": "UpdateItem",
          "update": {
            "expression": "SET tags = :tags REMOVE attributes",
            "expressionValues": {
              ":tags": $util.dynamodb.toDynamoDBJson($ctx.args.metaDataInput.tags)
            }
          }
        #end
        }
      ResponseMappingTemplate: |
        #if ($util.isNull($ctx.args.metaDataInput) || $util.isNull($ctx.args.metaDataInput.attributes) && $util.isNull($ctx.args.metaDataInput.tags))
          null
        #else
          $util.toJson($context.result)
        #end

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-media
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  S3BucketRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to invoke ExifLambda when new media file is uploaded
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref S3Bucket
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ExifLambda.Arn
          Id: ExifLambdaTarget
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ExifLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3BucketRule.Arn
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub ${S3Bucket.Arn}/*
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
          - Action: s3:ListBucket
            Effect: Allow
            Resource: !GetAtt S3Bucket.Arn
            Principal: "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: o-kvc3hucixa

  SearchLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt AllLambdasExecutionRole.Arn
      Handler: build/lambda/search/search.handler
      Timeout: 10
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: !Sub ${AWS::StackName}-${Timestamp}.zip
      Environment:
        Variables:
          TAGS_FILES_RELATIONSHIPS_TABLE: !Ref TagsFilesRelationshipsTable
          ATTRIBUTES_FILES_RELATIONSHIPS_TABLE: !Ref AttributesFilesRelationshipsTable
  SearchLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref SearchLambda]]

  ExifLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt AllLambdasExecutionRole.Arn
      Handler: build/lambda/exif/exif.handler
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: !Sub ${AWS::StackName}-${Timestamp}.zip
      Environment:
        Variables:
          META_TABLE: !Ref MetaTable
          ALLOWED_EXTENSIONS: !Sub ${AllowedExtensions}
  ExifLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref ExifLambda]]

  ListFolderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt AllLambdasExecutionRole.Arn
      Handler: build/lambda/fs/listFolder.handler
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: !Sub ${AWS::StackName}-${Timestamp}.zip
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref S3Bucket
          ALLOWED_EXTENSIONS: !Sub ${AllowedExtensions}
  ListFolderLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref ListFolderLambda]]

  ResizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt AllLambdasExecutionRole.Arn
      Handler: build/lambda/resizer/resizer.handler
      Timeout: 10
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: !Sub ${AWS::StackName}-${Timestamp}.zip
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref S3Bucket
  ResizerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref ResizerLambda]]

  AllLambdasExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-all-lambdas-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt MetaTable.Arn
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub ${S3Bucket.Arn}/*
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !GetAtt S3Bucket.Arn
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:ListShards
                Resource: !GetAtt MetaTable.StreamArn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt TagsTable.Arn
                  - !GetAtt TagsFilesRelationshipsTable.Arn
                  - !GetAtt AttributesTable.Arn
                  - !GetAtt AttributesFilesRelationshipsTable.Arn
                  - !Join
                    - ""
                    - - !GetAtt AttributesFilesRelationshipsTable.Arn
                      - /index/
                      - !Sub ${AWS::StackName}-attributes-files-relationships-index

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      ProtocolType: HTTP
  ResizerLambdaRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /resizer
      Target: !Join [/, [integrations, !Ref ResizerLambdaIntegration]]
  ResizerLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ""
        - - "arn:"
          - !Ref AWS::Partition
          - ":apigateway:"
          - !Ref AWS::Region
          - ":lambda:path/2015-03-31/functions/"
          - !GetAtt ResizerLambda.Arn
          - "/invocations"
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
  DefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      AutoDeploy: true
      ApiId: !Ref HttpApi
  HttpApiLambdaResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Join
        - ":"
        - - "arn:aws:lambda"
          - !Ref AWS::Region
          - !Ref AWS::AccountId
          - "function"
          - !Ref ResizerLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ":"
        - - arn:aws:execute-api
          - !Ref AWS::Region
          - !Ref AWS::AccountId
          - !Join
            - ""
            - - !Ref HttpApi
              - "/*/*/resizer"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: !GetAtt S3Bucket.DomainName
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ""
                - - "origin-access-identity/cloudfront/"
                  - !Ref CloudFrontOriginAccessIdentity
          - Id: !Select [2, !Split ["/", !GetAtt AppsyncApi.GraphQLUrl]]
            DomainName: !Select [2, !Split ["/", !GetAtt AppsyncApi.GraphQLUrl]]
            OriginCustomHeaders:
              - HeaderName: x-api-key
                HeaderValue: !GetAtt ApiKey.ApiKey
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
          - Id: !Select [2, !Split ["/", !GetAtt HttpApi.ApiEndpoint]]
            DomainName: !Select [2, !Split ["/", !GetAtt HttpApi.ApiEndpoint]]
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
        DefaultCacheBehavior:
          TargetOriginId: !GetAtt S3Bucket.DomainName
          ViewerProtocolPolicy: https-only
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            PathPattern: /graphql
            TargetOriginId:
              !Select [2, !Split ["/", !GetAtt AppsyncApi.GraphQLUrl]]
            ViewerProtocolPolicy: https-only
          - AllowedMethods:
              - GET
              - HEAD
            CachePolicyId: !GetAtt ResizerCachePolicy.Id
            PathPattern: /resizer
            TargetOriginId:
              !Select [2, !Split ["/", !GetAtt HttpApi.ApiEndpoint]]
            ViewerProtocolPolicy: https-only

  ResizerCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Sub ${AWS::StackName}-resizer-cache-policy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: whitelist
            QueryStrings:
              - width
              - height
              - key

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}-media-origin-access-identity

  DynamoStreamProcessingLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MetaTable.StreamArn
      FunctionName: !Ref DynamoStreamProcessingLambda
      StartingPosition: TRIM_HORIZON

  DynamoStreamProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs14.x
      Role: !GetAtt AllLambdasExecutionRole.Arn
      Handler: build/lambda/dbstream/index.handler
      Timeout: 10
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: !Sub ${AWS::StackName}-${Timestamp}.zip
      Environment:
        Variables:
          TAGS_TABLE: !Ref TagsTable
          TAGS_FILES_RELATIONSHIPS_TABLE: !Ref TagsFilesRelationshipsTable
          ATTRIBUTES_TABLE: !Ref AttributesTable
          ATTRIBUTES_FILES_RELATIONSHIPS_TABLE: !Ref AttributesFilesRelationshipsTable
          ATTRIBUTES_FILES_RELATIONSHIPS_TABLE_INDEX: !Sub ${AWS::StackName}-attributes-files-relationships-index

  DynamoStreamProcessingLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName:
        !Join ["", ["/aws/lambda/", !Ref DynamoStreamProcessingLambda]]

Outputs:
  CloudFrontDistributionUrl:
    Value: !GetAtt CloudFrontDistribution.DomainName
  AppsyncApiId:
    Value: !GetAtt AppsyncApi.ApiId
