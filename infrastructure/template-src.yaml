AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Aspan picture repository back-end

Transform: AWS::Serverless-2016-10-31

Metadata:
  BuildMethod: nodejs14.x
  BuildArchitecture: x86_64
  AWS::ServerlessRepo::Application:
    Name: epsilon
    Description: Aspan picture repository back-end
    Author: Adik
    SpdxLicenseId: Apache-2.0
    LicenseUrl: ../LICENSE.txt
    ReadmeUrl: ../README.md
    Labels: ['aspan']
    HomePageUrl: https://github.com/user1/my-app-project
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/user1/my-app-project

Resources:
  Dependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../dependencies

  SearchLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: search.handler
      Runtime: nodejs14.x
      Timeout: 100
      Policies:
        - AmazonDynamoDBReadOnlyAccess
      Layers:
        - !Ref Dependencies
      CodeUri: ../build/search
      Environment:
        Variables:
          TAGS_FILES_RELATIONSHIPS_TABLE: !Ref TagsFilesRelationshipsTable
          ATTRIBUTES_FILES_RELATIONSHIPS_TABLE: !Ref AttributesFilesRelationshipsTable
          META_TABLE: !Ref MetaTable
          NODE_OPTIONS: --enable-source-maps

  ExifLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: exif.handler
      Runtime: nodejs14.x
      Timeout: 100
      CodeUri: ../build/exif
      Layers:
        - !Ref Dependencies
      Events:
        S3Event:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref MediaBucket
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3ReadOnlyAccess
      Environment:
        Variables:
          META_TABLE: !Ref MetaTable
          ALLOWED_EXTENSIONS: jpg|jpeg
          NODE_OPTIONS: --enable-source-maps

  ListFolderLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: listFolder.handler
      CodeUri: ../build/fs
      Runtime: nodejs14.x
      Timeout: 100
      Layers:
        - !Ref Dependencies
      Policies:
        - AmazonS3ReadOnlyAccess
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          ALLOWED_EXTENSIONS: jpg|jpeg
          NODE_OPTIONS: --enable-source-maps

  ResizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: resizer.handler
      CodeUri: ../build/resizer
      Runtime: nodejs14.x
      Timeout: 100
      Layers:
        - !Ref Dependencies
      Policies:
        - AmazonS3ReadOnlyAccess
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Method: GET
            Path: /resizer
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          NODE_OPTIONS: --enable-source-maps

  DynamoStreamProcessingLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: ../build/dbstream
      Runtime: nodejs14.x
      Timeout: 100
      Layers:
        - !Ref Dependencies
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        DDBEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt MetaTable.StreamArn
            StartingPosition: TRIM_HORIZON
      Environment:
        Variables:
          TAGS_TABLE: !Ref TagsTable
          TAGS_FILES_RELATIONSHIPS_TABLE: !Ref TagsFilesRelationshipsTable
          ATTRIBUTES_TABLE: !Ref AttributesTable
          ATTRIBUTES_FILES_RELATIONSHIPS_TABLE: !Ref AttributesFilesRelationshipsTable
          ATTRIBUTES_FILES_RELATIONSHIPS_TABLE_INDEX: !Sub ${AWS::StackName}-attributes-files-relationships-index
          NODE_OPTIONS: --enable-source-maps

  GetTagsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 100
      Policies:
        - AmazonDynamoDBReadOnlyAccess
      Layers:
        - !Ref Dependencies
      CodeUri: ../build/getTags
      Environment:
        Variables:
          TAGS_TABLE: !Ref TagsTable
          NODE_OPTIONS: --enable-source-maps

  GetAttributesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 100
      Policies:
        - AmazonDynamoDBReadOnlyAccess
      Layers:
        - !Ref Dependencies
      CodeUri: ../build/getAttributes
      Environment:
        Variables:
          ATTRIBUTES_TABLE: !Ref AttributesTable
          NODE_OPTIONS: --enable-source-maps

  MetaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-meta
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  TagsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-tags
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tag
          AttributeType: S
      KeySchema:
        - AttributeName: tag
          KeyType: HASH

  TagsFilesRelationshipsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-tags-files-relationships
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tag
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: tag
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE

  AttributesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-attributes
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: attribute
          AttributeType: S
      KeySchema:
        - AttributeName: attribute
          KeyType: HASH

  AttributesFilesRelationshipsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-attributes-files-relationships
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: attribute
          AttributeType: S
        - AttributeName: id
          AttributeType: S
        - AttributeName: attributeValue
          AttributeType: S
      KeySchema:
        - AttributeName: attributeValue
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: !Sub ${AWS::StackName}-attributes-files-relationships-index
          KeySchema:
            - AttributeName: attribute
              KeyType: HASH
            - AttributeName: id
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY

  AppsyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}-appsync
      AuthenticationType: API_KEY

  ApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Expires: 1682913600

  AppsyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Definition: |

  MetaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name:
        !Join [
          "_",
          [
            !Join ["_", !Split ["-", !Sub "${AWS::StackName}"]],
            "meta_datasource",
          ],
        ]
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref MetaTable
        AwsRegion: !Sub ${AWS::Region}

  AttributesDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name:
        !Join ["_", [!Join ["_", !Split ["-", !Ref GetAttributesLambda]], "ds"]]
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt LambdaAppsyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetAttributesLambda.Arn

  TagsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name: !Join ["_", [!Join ["_", !Split ["-", !Ref GetTagsLambda]], "ds"]]
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt LambdaAppsyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetTagsLambda.Arn

  SearchLambdaAppsyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name: !Join ["_", [!Join ["_", !Split ["-", !Ref SearchLambda]], "ds"]]
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt LambdaAppsyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt SearchLambda.Arn

  ListFolderLambdaAppsyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      Name:
        !Join ["_", [!Join ["_", !Split ["-", !Ref ListFolderLambda]], "ds"]]
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt LambdaAppsyncDataSourceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ListFolderLambda.Arn

  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
            Resource:
              - !Join ["", [!GetAtt MetaTable.Arn, "*"]]
              - !Join ["", [!GetAtt AttributesTable.Arn, "*"]]
              - !Join ["", [!GetAtt TagsTable.Arn, "*"]]

  LambdaAppsyncDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref ListFolderLambdaAppsyncDataSourceRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  ListFolderLambdaAppsyncDataSourceRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:invokeFunction
            Resource:
              - !GetAtt ListFolderLambda.Arn
              - !GetAtt SearchLambda.Arn
              - !GetAtt GetTagsLambda.Arn
              - !GetAtt GetAttributesLambda.Arn

  ListFolderQueryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Query
      FieldName: listFolder
      DataSourceName: !GetAtt ListFolderLambdaAppsyncDataSource.Name

  SearchQueryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Query
      FieldName: search
      DataSourceName: !GetAtt SearchLambdaAppsyncDataSource.Name
      RequestMappingTemplate: |
        #if ($util.isNull($ctx.args.searchInput) || ($util.isNull($ctx.args.searchInput.filter.attributes) && $util.isNull($ctx.args.searchInput.filter.tags)))
          $util.error("search must have at least one filter specified")
        #end
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson($context)
        }

  MetaDataAttributesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: MetaData
      FieldName: attributes
      DataSourceName: !GetAtt MetaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.source.id)
          },
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result.attributes)

  MetaDataTagsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: MetaData
      FieldName: tags
      DataSourceName: !GetAtt MetaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.source.id)
          },
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result.tags)

  AttributesQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Query
      FieldName: attributes
      DataSourceName: !GetAtt AttributesDataSource.Name

  TagsQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Query
      FieldName: tags
      DataSourceName: !GetAtt TagsDataSource.Name

  UpdateMetaDataMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppsyncSchema
    Properties:
      ApiId: !GetAtt AppsyncApi.ApiId
      TypeName: Mutation
      FieldName: updateMetaData
      DataSourceName: !GetAtt MetaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
          },
        #if ($util.isNull($ctx.args.metaDataInput) || $util.isNull($ctx.args.metaDataInput.attributes) && $util.isNull($ctx.args.metaDataInput.tags))
          "operation": "DeleteItem"
        #elseif (!$util.isNull($ctx.args.metaDataInput.attributes) && !$util.isNull($ctx.args.metaDataInput.tags))
          "operation": "UpdateItem",
          "update": {
            "expression": "SET attributes = :attributes, tags = :tags",
            "expressionValues": {
              ":attributes": $util.dynamodb.toDynamoDBJson($ctx.args.metaDataInput.attributes),
              ":tags": $util.dynamodb.toDynamoDBJson($ctx.args.metaDataInput.tags)
            }
          }
        #elseif (!$util.isNull($ctx.args.metaDataInput.attributes) && $util.isNull($ctx.args.metaDataInput.tags))
          "operation": "UpdateItem",
          "update": {
            "expression": "SET attributes = :attributes REMOVE tags",
            "expressionValues": {
              ":attributes": $util.dynamodb.toDynamoDBJson($ctx.args.metaDataInput.attributes)
            }
          }
        #elseif (!$util.isNull($ctx.args.metaDataInput.tags) && $util.isNull($ctx.args.metaDataInput.attributes))
          "operation": "UpdateItem",
          "update": {
            "expression": "SET tags = :tags REMOVE attributes",
            "expressionValues": {
              ":tags": $util.dynamodb.toDynamoDBJson($ctx.args.metaDataInput.tags)
            }
          }
        #end
        }
      ResponseMappingTemplate: |
        #if ($util.isNull($ctx.args.metaDataInput) || $util.isNull($ctx.args.metaDataInput.attributes) && $util.isNull($ctx.args.metaDataInput.tags))
          null
        #else
          $util.toJson($context.result)
        #end

  WebsiteHostingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-website-bucket
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      LifecycleConfiguration:
        Rules:
          - Id: IntelligentTieringRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 1
                StorageClass: INTELLIGENT_TIERING

  WebsiteHostingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteHostingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal: "*"
            Resource: !Sub ${WebsiteHostingBucket.Arn}/*

  MediaBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-media-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      LifecycleConfiguration:
        Rules:
          - Id: IntelligentTieringRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 1
                StorageClass: INTELLIGENT_TIERING


  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub ${MediaBucket.Arn}/*
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
          - Action: s3:ListBucket
            Effect: Allow
            Resource: !GetAtt MediaBucket.Arn
            Principal: "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: o-kvc3hucixa
          - Action: s3:PutObject
            Effect: Allow
            Principal:
              AWS: "*"
            Resource: !Sub ${MediaBucket.Arn}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
                aws:PrincipalOrgID: o-kvc3hucixa

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: !GetAtt MediaBucket.DomainName
            DomainName: !GetAtt MediaBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ""
                - - "origin-access-identity/cloudfront/"
                  - !Ref CloudFrontOriginAccessIdentity
          - Id: !Select [2, !Split ["/", !GetAtt AppsyncApi.GraphQLUrl]]
            DomainName: !Select [2, !Split ["/", !GetAtt AppsyncApi.GraphQLUrl]]
            OriginCustomHeaders:
              - HeaderName: x-api-key
                HeaderValue: !GetAtt ApiKey.ApiKey
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
          - Id: !Sub ${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com
            DomainName: !Sub ${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
        DefaultCacheBehavior:
          TargetOriginId: !GetAtt MediaBucket.DomainName
          ViewerProtocolPolicy: https-only
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            PathPattern: /graphql
            TargetOriginId:
              !Select [2, !Split ["/", !GetAtt AppsyncApi.GraphQLUrl]]
            ViewerProtocolPolicy: https-only
            ResponseHeadersPolicyId: !Ref CloudFrontResponseHeadersPolicy
          - AllowedMethods:
              - GET
              - HEAD
            CachePolicyId: !GetAtt ResizerCachePolicy.Id
            PathPattern: /resizer
            TargetOriginId: !Sub ${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com
            ViewerProtocolPolicy: https-only

  ResizerCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Sub ${AWS::StackName}-resizer-cache-policy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: whitelist
            QueryStrings:
              - width
              - height
              - key

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}-media-origin-access-identity

  CloudFrontResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        CorsConfig:
          AccessControlAllowCredentials: false
          AccessControlAllowHeaders:
            Items:
              - "*"
          AccessControlAllowMethods:
            Items:
              - ALL
          AccessControlAllowOrigins:
            Items:
              - "*"
          OriginOverride: true
        Name: !Sub ${AWS::StackName}-reponse-headers-policy

Outputs:
  CloudFrontDistributionUrl:
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt CloudFrontDistribution.DomainName
  AppsyncApiId:
    Value: !GetAtt AppsyncApi.ApiId
  MediaBucketName:
    Value: !Ref MediaBucket
    Export:
      Name: MediaBucketName
  MediaBucketArn:
    Value: !GetAtt MediaBucket.Arn
    Export:
      Name: MediaBucketArn
  WebsiteHostingBucketName:
    Value: !Ref WebsiteHostingBucket
    Export:
      Name: WebsiteHostingBucketName
  WebsiteHostingBucketArn:
    Value: !GetAtt WebsiteHostingBucket.Arn
    Export:
      Name: WebsiteHostingBucketArn
